import sys
import random
import networkx as nkx
import requests
import json
import pandas as pd
from io import open
from analyzeNetworks import*
from fetchAlbumsfinal import*
from artistNetworks import*
from fetchArtistedited import* 


def get_random_track(album_id):
    url = 'https://api.spotify.com/v1/albums/' + album_id + '/tracks'
    req = requests.get(url)
    assert req.ok, 'error'
    data = req.json()
    assert data.get('total'), 'not found'
    playlistsongs = [data['items'][i]['name'] for i in range(len(data['items']))]
    playlistsong = random.choice(tracks)
    return song

if __name__ == '__main__':
    artist_names = sys.argv[1:]
    print "input artists are", artist_names

    edgelists= []
  
    artistids = [fetchArtistId(a) for a in artist_names]
    edgelists = [getEdgeList(a, 2) for a in artistids]
    combined = edgelists[1]
    for i in range(1, len(edge_lists)):
        newedgelist = edgelists[0]
        combineedges = combineEdgeLists(combined, next_edge_list)
    ptn = pdTonkx(combined)
    
    playlistartists = []
    playlistalbumids = []

    for i in range(30):
        albums_exist = false
        artist = randomCentralNode(ptn)
        while not albums_exist:
            try:
                playlist_album_ids.append(random.choice(fetchAlbumIds(artist)))
                albums_exist = True
            except AssertionError:
                artist = randomCentralNode(ptn)
        playlist_artists.append(fetchArtistInfo(artist)['name'])

    playlistalbums = []

    playlisttracks = []

    for album in playlistalbumids:
        playlist_albums.append(fetchAlbumInfo(album)['name'])
        playlist_tracks.append(get_random_track(album))

    table = zip(playlist_artists, playlist_albums, playlist_tracks)
    with io.open('playlist.csv', 'w', encoding='utf-8') as f:
        f.write(u'artist_name,album_name,track_name\n')
        for x, y, z in table:
            f.write(u'"%s","%s","%s"\n' % (x, y ,z))